import React, { useState } from 'react';
import { MessageCircle, Send, X, Bot, User, Lightbulb, BookOpen, HelpCircle, Volume2 } from 'lucide-react';
import { useLanguage } from '../contexts/LanguageContext';

interface Message {
  id: number;
  text: string;
  isUser: boolean;
  timestamp: Date;
  language?: string;
}

const CulturalChatbot: React.FC = () => {
  const [isOpen, setIsOpen] = useState(false);
  const { t, language } = useLanguage();
  const [messages, setMessages] = useState<Message[]>([
    {
      id: 1,
      text: language === 'hi' 
        ? "рдирдорд╕реНрддреЗ! рдореИрдВ рдЖрдкрдХрд╛ AI рд╢рд┐рдХреНрд╖рд╛ рд╕рд╣рд╛рдпрдХ рд╣реВрдВред рдЖрдЬ рдореИрдВ рдЖрдкрдХреА рдХреИрд╕реЗ рдорджрдж рдХрд░ рд╕рдХрддрд╛ рд╣реВрдВ?"
        : language === 'raj'
        ? "рдЦрдореНрдорд╛ рдШрдгреА! рдореИрдВ рдЖрдкрдХрд╛ AI рд╢рд┐рдХреНрд╖рд╛ рд╕рд╣рд╛рдпрдХ рд╣реВрдВред рдЖрдЬ рдореИрдВ рдЖрдкрдХреА рдХреИрд╕реЗ рдорджрдж рдХрд░ рд╕рдХрддрд╛ рд╣реВрдВ?"
        : "Namaste! I'm your AI learning assistant. How can I help you today?",
      isUser: false,
      timestamp: new Date()
    }
  ]);
  const [inputText, setInputText] = useState('');
  const [isTyping, setIsTyping] = useState(false);

  // Hardcoded AI responses based on language and input
  const getAIResponse = (userInput: string): string => {
    const input = userInput.toLowerCase();
    
    // Topic explanation responses
    if (input.includes('explain') || input.includes('рд╕рдордЭрд╛рдПрдВ') || input.includes('рд╕рдордЭрд╛рд╡реЛ')) {
      if (language === 'hi') {
        return "рдореИрдВ рдЖрдкрдХреЛ рдЗрд╕ рд╡рд┐рд╖рдп рдХреЛ рд╕рдордЭрд╛рддрд╛ рд╣реВрдВред рдпрд╣ рдПрдХ рдорд╣рддреНрд╡рдкреВрд░реНрдг рдЕрд╡рдзрд╛рд░рдгрд╛ рд╣реИ рдЬреЛ рдЖрдкрдХреА рдкрдврд╝рд╛рдИ рдореЗрдВ рдмрд╣реБрдд рдЙрдкрдпреЛрдЧреА рд╣реЛрдЧреАред рдХреНрдпрд╛ рдЖрдк рдЪрд╛рд╣рддреЗ рд╣реИрдВ рдХрд┐ рдореИрдВ рдЗрд╕реЗ рдФрд░ рд╡рд┐рд╕реНрддрд╛рд░ рд╕реЗ рд╕рдордЭрд╛рдКрдВ?";
      } else if (language === 'raj') {
        return "рдореИрдВ рдЖрдкрдХреЛ рдЗрд╕ рд╡рд┐рд╖рдп рдХреЛ рд╕рдордЭрд╛рддрд╛ рд╣реВрдВред рдпреЛ рдПрдХ рдЬрд░реВрд░реА рдмрд╛рдд рд╣реИ рдЬреЛ рдЖрдкрдХреА рдкрдврд╝рд╛рдИ рдореЗрдВ рдмрд╣реБрдд рдХрд╛рдо рдЖрд╡реЗрдЧреАред рдХреЗ рдЖрдк рдЪрд╛рд╣реЛ рд╣реЛ рдХрд┐ рдореИрдВ рдЗрд╕реЗ рдФрд░ рд╡рд┐рд╕реНрддрд╛рд░ рд╕реЗ рд╕рдордЭрд╛рдКрдВ?";
      }
      return "I'll explain this topic for you. This is an important concept that will be very useful in your studies. Would you like me to explain it in more detail?";
    }
    
    // Lecture summary responses
    if (input.includes('summary') || input.includes('рд╕рд╛рд░рд╛рдВрд╢')) {
      if (language === 'hi') {
        return "рдпрд╣рд╛рдВ рд╡реНрдпрд╛рдЦреНрдпрд╛рди рдХрд╛ рд╕рд╛рд░рд╛рдВрд╢ рд╣реИ: рдореБрдЦреНрдп рдмрд┐рдВрджреБ 1) рдмреБрдирд┐рдпрд╛рджреА рдЕрд╡рдзрд╛рд░рдгрд╛рдПрдВ 2) рд╡реНрдпрд╛рд╡рд╣рд╛рд░рд┐рдХ рдЙрджрд╛рд╣рд░рдг 3) рдЕрднреНрдпрд╛рд╕ рдХреЗ рд╕реБрдЭрд╛рд╡ред рдХреНрдпрд╛ рдЖрдк рдХрд┐рд╕реА рд╡рд┐рд╢реЗрд╖ рднрд╛рдЧ рдХреЗ рдмрд╛рд░реЗ рдореЗрдВ рдФрд░ рдЬрд╛рдирдирд╛ рдЪрд╛рд╣рддреЗ рд╣реИрдВ?";
      } else if (language === 'raj') {
        return "рдпрд╣рд╛рдВ рдкрд╛рда рд░реЛ рд╕рд╛рд░рд╛рдВрд╢ рд╣реИ: рдореБрдЦреНрдп рдмрд╛рдд 1) рдмреБрдирд┐рдпрд╛рджреА рдмрд╛рддрд╛рдВ 2) рд╡реНрдпрд╛рд╡рд╣рд╛рд░рд┐рдХ рдЙрджрд╛рд╣рд░рдг 3) рдЕрднреНрдпрд╛рд╕ рдХреЗ рд╕реБрдЭрд╛рд╡ред рдХреЗ рдЖрдк рдХреЛрдИ рдЦрд╛рд╕ рд╣рд┐рд╕реНрд╕реЗ рдХреЗ рдмрд╛рд░реЗ рдореЗрдВ рдФрд░ рдЬрд╛рдирдирд╛ рдЪрд╛рд╣реЛ рд╣реЛ?";
      }
      return "Here's the lecture summary: Key points 1) Basic concepts 2) Practical examples 3) Practice suggestions. Would you like to know more about any specific part?";
    }
    
    // Quiz/Question responses
    if (input.includes('quiz') || input.includes('question') || input.includes('рдкреНрд░рд╢реНрди') || input.includes('рд╕рд╡рд╛рд▓')) {
      if (language === 'hi') {
        return "рдореИрдВ рдЖрдкрдХреЗ рдкреНрд░рд╢реНрди рдХрд╛ рдЙрддреНрддрд░ рджреЗрдиреЗ рдореЗрдВ рдЦреБрд╢ рд╣реВрдВред рдХреГрдкрдпрд╛ рдЕрдкрдирд╛ рдкреНрд░рд╢реНрди рд╕реНрдкрд╖реНрдЯ рд░реВрдк рд╕реЗ рдкреВрдЫреЗрдВ рдФрд░ рдореИрдВ рдЖрдкрдХреЛ рд╕рдмрд╕реЗ рдЕрдЪреНрдЫрд╛ рдЙрддреНрддрд░ рджреЗрдиреЗ рдХреА рдХреЛрд╢рд┐рд╢ рдХрд░реВрдВрдЧрд╛ред";
      } else if (language === 'raj') {
        return "рдореИрдВ рдЖрдкрдХреЗ рд╕рд╡рд╛рд▓ рд░реЛ рдЬрд╡рд╛рдм рджреЗрдиреЗ рдореЗрдВ рдЦреБрд╢ рд╣реВрдВред рдХреГрдкрдпрд╛ рдЖрдкрдиреЛ рд╕рд╡рд╛рд▓ рд╕рд╛рдл-рд╕рд╛рдл рдкреВрдЫреЛ рдЕрд░ рдореИрдВ рдЖрдкрдХреЛ рд╕рдмрд╕реЗ рдмрдврд╝рд┐рдпрд╛ рдЬрд╡рд╛рдм рджреЗрдиреЗ рд░реА рдХреЛрд╢рд┐рд╢ рдХрд░реВрдВрдЧрд╛ред";
      }
      return "I'm happy to answer your question. Please ask your question clearly and I'll try to give you the best answer.";
    }
    
    // Math/Science help
    if (input.includes('math') || input.includes('science') || input.includes('рдЧрдгрд┐рдд') || input.includes('рд╡рд┐рдЬреНрдЮрд╛рди')) {
      if (language === 'hi') {
        return "рдЧрдгрд┐рдд рдФрд░ рд╡рд┐рдЬреНрдЮрд╛рди рдореЗрдВ рдореИрдВ рдЖрдкрдХреА рдорджрдж рдХрд░ рд╕рдХрддрд╛ рд╣реВрдВред рдХреГрдкрдпрд╛ рдЕрдкрдиреА рд╕рдорд╕реНрдпрд╛ рдмрддрд╛рдПрдВ рдФрд░ рдореИрдВ рдЗрд╕реЗ рдЪрд░рдгрдмрджреНрдз рддрд░реАрдХреЗ рд╕реЗ рд╣рд▓ рдХрд░рдиреЗ рдореЗрдВ рдЖрдкрдХреА рд╕рд╣рд╛рдпрддрд╛ рдХрд░реВрдВрдЧрд╛ред";
      } else if (language === 'raj') {
        return "рдЧрдгрд┐рдд рдЕрд░ рд╡рд┐рдЬреНрдЮрд╛рди рдореЗрдВ рдореИрдВ рдЖрдкрдХреА рдорджрдж рдХрд░ рд╕рдХрддрд╛ рд╣реВрдВред рдХреГрдкрдпрд╛ рдЖрдкрдиреА рд╕рдорд╕реНрдпрд╛ рдмрддрд╛рдУ рдЕрд░ рдореИрдВ рдЗрд╕реЗ рдХрджрдо-рдХрджрдо рд╣рд▓ рдХрд░рдиреЗ рдореЗрдВ рдЖрдкрдХреА рдорджрдж рдХрд░реВрдВрдЧрд╛ред";
      }
      return "I can help you with math and science. Please tell me your problem and I'll help you solve it step by step.";
    }
    
    // Default responses
    const defaultResponses: Record<string, string[]> = {
      hi: [
        "рдореИрдВ рдЖрдкрдХрд╛ рдкреНрд░рд╢реНрди рд╕рдордЭ рдЧрдпрд╛ рд╣реВрдВред рдореИрдВ рдЗрд╕рдореЗрдВ рдЖрдкрдХреА рдорджрдж рдХрд░рдиреЗ рдХреА рдХреЛрд╢рд┐рд╢ рдХрд░рддрд╛ рд╣реВрдВред",
        "рдпрд╣ рдПрдХ рдЕрдЪреНрдЫрд╛ рдкреНрд░рд╢реНрди рд╣реИред рдореБрдЭреЗ рд▓рдЧрддрд╛ рд╣реИ рдХрд┐ рдореИрдВ рдЗрд╕рдХрд╛ рдЙрддреНрддрд░ рджреЗ рд╕рдХрддрд╛ рд╣реВрдВред",
        "рдЖрдкрдХрд╛ рд╕рд╡рд╛рд▓ рджрд┐рд▓рдЪрд╕реНрдк рд╣реИред рдЖрдЗрдП рдЗрд╕реЗ рдПрдХ рд╕рд╛рде рд╣рд▓ рдХрд░рддреЗ рд╣реИрдВред"
      ],
      raj: [
        "рдореИрдВ рдЖрдкрдХрд╛ рд╕рд╡рд╛рд▓ рд╕рдордЭ рдЧрдпрд╛ рд╣реВрдВред рдореИрдВ рдЗрд╕рдореЗрдВ рдЖрдкрдХреА рдорджрдж рдХрд░рдиреЗ рд░реА рдХреЛрд╢рд┐рд╢ рдХрд░рддрд╛ рд╣реВрдВред",
        "рдпреЛ рдПрдХ рдмрдврд╝рд┐рдпрд╛ рд╕рд╡рд╛рд▓ рд╣реИред рдореБрдЭреЗ рд▓рд╛рдЧреЗ рд╣реИ рдХрд┐ рдореИрдВ рдЗрд╕рдХрд╛ рдЬрд╡рд╛рдм рджреЗ рд╕рдХрддрд╛ рд╣реВрдВред",
        "рдЖрдкрдХрд╛ рд╕рд╡рд╛рд▓ рджрд┐рд▓рдЪрд╕реНрдк рд╣реИред рдЖрдУ рдЗрд╕реЗ рдПрдХ рд╕рд╛рде рд╣рд▓ рдХрд░рддреЗ рд╣реИрдВред"
      ],
      en: [
        "I understand your question. Let me help you with that!",
        "That's a great question. I think I can help you with this.",
        "Your question is interesting. Let's solve this together."
      ]
    };
    
    const responses = defaultResponses[language] || defaultResponses.en;
    return responses[Math.floor(Math.random() * responses.length)];
  };

  const quickActions = [
    { 
      id: 1, 
      text: t('explainTopic'), 
      textHi: 'рд╡рд┐рд╖рдп рд╕рдордЭрд╛рдПрдВ',
      textRaj: 'рд╡рд┐рд╖рдп рд╕рдордЭрд╛рд╡реЛ',
      icon: Lightbulb 
    },
    { 
      id: 2, 
      text: t('summarizeLecture'), 
      textHi: 'рд╡реНрдпрд╛рдЦреНрдпрд╛рди рд╕рд╛рд░рд╛рдВрд╢',
      textRaj: 'рдкрд╛рда рд╕рд╛рд░рд╛рдВрд╢',
      icon: BookOpen 
    },
    { 
      id: 3, 
      text: t('answerQuiz'), 
      textHi: 'рдкреНрд░рд╢реНрди рдХрд╛ рдЙрддреНрддрд░',
      textRaj: 'рд╕рд╡рд╛рд▓ рд░реЛ рдЬрд╡рд╛рдм',
      icon: HelpCircle 
    },
  ];

  const handleSendMessage = () => {
    if (inputText.trim()) {
      const userMessage: Message = {
        id: messages.length + 1,
        text: inputText,
        isUser: true,
        timestamp: new Date()
      };
      
      setMessages(prev => [...prev, userMessage]);
      const currentInput = inputText;
      setInputText('');
      setIsTyping(true);
      
      // Simulate AI response with realistic delay
      setTimeout(() => {
        setIsTyping(false);
        const aiResponseText = getAIResponse(currentInput);
        
        const aiResponse: Message = {
          id: messages.length + 2,
          text: aiResponseText,
          isUser: false,
          timestamp: new Date()
        };
        setMessages(prev => [...prev, aiResponse]);
      }, 1500 + Math.random() * 1000); // Random delay between 1.5-2.5 seconds
    }
  };

  const handleQuickAction = (actionText: string) => {
    setInputText(actionText);
  };

  const formatTime = (date: Date) => {
    return date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
  };

  const getQuickActionText = (action: { id:number, text: string, textHi: string, textRaj: string, icon: React.ElementType }) => {
    switch (language) {
      case 'hi': return action.textHi;
      case 'raj': return action.textRaj;
      default: return action.text;
    }
  };

  return (
    <>
      {/* Floating Chat Button */}
      <button
        onClick={() => setIsOpen(true)}
        className={`fixed bottom-20 right-4 w-14 h-14 bg-black dark:bg-white text-white dark:text-black rounded-full shadow-xl hover:shadow-2xl transition-all duration-300 flex items-center justify-center z-50 ${
          isOpen ? 'scale-0' : 'scale-100'
        }`}
      >
        <MessageCircle size={24} />
        <div className="absolute -top-1 -right-1 w-5 h-5 bg-green-500 rounded-full flex items-center justify-center">
          <span className="text-xs">ЁЯдЦ</span>
        </div>
      </button>

      {/* Chat Window */}
      {isOpen && (
        <div className="fixed bottom-20 right-4 w-80 h-96 bg-white dark:bg-black rounded-xl shadow-2xl border border-gray-200 dark:border-gray-800 z-50 flex flex-col overflow-hidden animate-scale-in">
          {/* Chat Header */}
          <div className="bg-black dark:bg-white text-white dark:text-black p-4">
            <div className="flex items-center justify-between">
              <div className="flex items-center">
                <div className="w-8 h-8 bg-white/20 dark:bg-black/20 rounded-full flex items-center justify-center mr-3">
                  <Bot size={16} />
                </div>
                <div>
                  <h3 className="font-semibold">{t('aiAssistant')}</h3>
                  <p className="text-xs text-gray-300 dark:text-gray-700">Available 24/7</p>
                </div>
              </div>
              <button
                onClick={() => setIsOpen(false)}
                className="p-1 hover:bg-white/20 dark:hover:bg-black/20 rounded-full transition-colors"
              >
                <X size={18} />
              </button>
            </div>
          </div>

          {/* Messages */}
          <div className="flex-1 overflow-y-auto p-4 space-y-3 bg-gray-50 dark:bg-gray-900">
            {messages.map((message) => (
              <div
                key={message.id}
                className={`flex ${message.isUser ? 'justify-end' : 'justify-start'}`}
              >
                <div className="flex items-start max-w-xs">
                  {!message.isUser && (
                    <div className="w-6 h-6 bg-black dark:bg-white rounded-full flex items-center justify-center mr-2 flex-shrink-0">
                      <Bot className="text-white dark:text-black" size={12} />
                    </div>
                  )}
                  <div
                    className={`px-3 py-2 rounded-lg ${
                      message.isUser
                        ? 'bg-black dark:bg-white text-white dark:text-black'
                        : 'bg-white dark:bg-gray-800 text-black dark:text-white border border-gray-200 dark:border-gray-700'
                    }`}
                  >
                    <p className="text-sm">{message.text}</p>
                    <p className={`text-xs mt-1 ${
                      message.isUser ? 'text-gray-300 dark:text-gray-700' : 'text-gray-500 dark:text-gray-400'
                    }`}>
                      {formatTime(message.timestamp)}
                    </p>
                  </div>
                  {message.isUser && (
                    <div className="w-6 h-6 bg-gray-400 rounded-full flex items-center justify-center ml-2 flex-shrink-0">
                      <User className="text-white" size={12} />
                    </div>
                  )}
                </div>
              </div>
            ))}
            
            {/* Typing Indicator */}
            {isTyping && (
              <div className="flex justify-start">
                <div className="flex items-start max-w-xs">
                  <div className="w-6 h-6 bg-black dark:bg-white rounded-full flex items-center justify-center mr-2 flex-shrink-0">
                    <Bot className="text-white dark:text-black" size={12} />
                  </div>
                  <div className="px-3 py-2 rounded-lg bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700">
                    <div className="flex space-x-1">
                      <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce"></div>
                      <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style={{ animationDelay: '0.1s' }}></div>
                      <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style={{ animationDelay: '0.2s' }}></div>
                    </div>
                  </div>
                </div>
              </div>
            )}
          </div>

          {/* Quick Actions */}
          <div className="px-4 py-2 bg-gray-50 dark:bg-gray-900 border-t border-gray-200 dark:border-gray-800">
            <div className="flex flex-wrap gap-2 mb-3">
              {quickActions.map((action) => {
                const Icon = action.icon;
                return (
                  <button
                    key={action.id}
                    onClick={() => handleQuickAction(getQuickActionText(action))}
                    className="flex items-center px-3 py-1 bg-white dark:bg-gray-800 text-gray-700 dark:text-gray-300 rounded-full text-xs hover:bg-gray-100 dark:hover:bg-gray-700 transition-colors border border-gray-200 dark:border-gray-700"
                  >
                    <Icon size={12} className="mr-1" />
                    {getQuickActionText(action)}
                  </button>
                );
              })}
            </div>
          </div>

          {/* Input Area */}
          <div className="p-4 bg-white dark:bg-black border-t border-gray-200 dark:border-gray-800">
            <div className="flex items-center space-x-2">
              <input
                type="text"
                value={inputText}
                onChange={(e) => setInputText(e.target.value)}
                onKeyPress={(e) => e.key === 'Enter' && handleSendMessage()}
                placeholder={t('typeYourDoubt')}
                className="flex-1 p-2 border border-gray-300 dark:border-gray-700 rounded-lg bg-white dark:bg-black text-black dark:text-white text-sm focus:ring-2 focus:ring-black dark:focus:ring-white focus:border-transparent"
              />
              <button className="p-2 bg-gray-100 dark:bg-gray-800 text-gray-600 dark:text-gray-400 rounded-lg hover:bg-gray-200 dark:hover:bg-gray-700 transition-colors">
                <Volume2 size={16} />
              </button>
              <button
                onClick={handleSendMessage}
                className="p-2 bg-black dark:bg-white text-white dark:text-black rounded-lg hover:bg-gray-800 dark:hover:bg-gray-200 transition-colors"
              >
                <Send size={16} />
              </button>
            </div>
          </div>
        </div>
      )}
    </>
  );
};

export default CulturalChatbot;